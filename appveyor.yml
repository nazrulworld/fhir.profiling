environment:
  matrix:
    - PYTHON: "C:\\Python36"
      PYTHON_VERSION: "3.6.8"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python36-x64"
      PYTHON_VERSION: "3.6.8"
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Python37"
      PYTHON_VERSION: "3.7.x" # currently 3.7.9
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python37-x64"
      PYTHON_VERSION: "3.7.x" # currently 3.7.9
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Python38"
      PYTHON_VERSION: "3.8.x" # currently 3.8.6
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python38-x64"
      PYTHON_VERSION: "3.8.x" # currently 3.8.6
      PYTHON_ARCH: "64"

#    - PYTHON: "C:\\Python39"
#      PYTHON_VERSION: "3.9.0" # currently 3.9.0
#      PYTHON_ARCH: "32"

#    - PYTHON: "C:\\Python39-x64"
#      PYTHON_VERSION: "3.9.0" # currently 3.9.0
#      PYTHON_ARCH: "64"

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "python -m pip install --upgrade pip wheel"

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "pip install -e .[test]"
  - "pip install codecov"

build_script:
  # Build the compiled extension
  - "python setup.py build"

test_script:
  # Run the project tests and store results in .xml log
  - "pytest tests"

after_test:
  # If tests are successful, create binary packages for the project.
  - "python setup.py bdist_wheel"
  - ps: "ls dist"

artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  - path: dist\*

#on_success:
#  - TODO: upload the content of dist/*.whl to a public wheelhouse
#

# on_finish:
  # Upload test results to AppVeyor
